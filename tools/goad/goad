#! /usr/bin/env perl
# -*-Mode: perl;-*-

# make sure we execute perl
#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

# $Header: /m_home/m_utkej/Argonne/cvs2svn/cvs/OpenAD/tools/goad/goad,v 1.3 2004-05-20 15:11:13 eraxxon Exp $
## * BeginCopyright *********************************************************
## 
## 
## *********************************************************** EndCopyright *

#############################################################################
##
## $Source: /m_home/m_utkej/Argonne/cvs2svn/cvs/OpenAD/tools/goad/goad,v $ 
##
##   Nathan Tallent.
##
#############################################################################

use strict;
use warnings;

use FindBin qw($Script $RealBin);
use File::Spec;
use IO::File;
use Getopt::Long;

use lib "$RealBin/../libperl";
use RunCmds qw(%CmdDesc RunCmds RunCmd);


STDOUT->autoflush(1); 

my $the_program = $Script;
my $the_usage = 
"usage: ${the_program} [options]

Get (or update) OpenAD repositories.  Requires cvs and bitkeeper.

Plans: 
  - create a conf file to support abnormal (development) checkouts.
  - save all output into one log file
  
Options:
  --useranl=<ANL user name> [temporary]
  --skip-update  -- do not update existing repositories; only get new ones

  -v [lvl], --verbose [lvl]
    Set verbosity level.  If no level is supplied, defaults to 2.
    0: Play the silent game
    1: Pouty (terse message)
    2: Sanguine (standard activity messages) [Default]
    3: Chatty
    4: Talk your ear off
  -h, --help         print help

Development options:
  -i, --interactive  
    prompt user to authorize each command
\n";

my @the_options = ('useranl=s',
		   'skip-update',
		   
		   'verbose|v:i',
		   'help|h', 
		   'interactive|i',
		   );

#############################################################################

my ($mode_verb_silent,
    $mode_verb_terse,
    $mode_verb_normal,
    $mode_verb_chatty,
    $mode_verb_teengirls) =
    (0, 1, 2, 3, 4);

# CmdDesc: a pipeline command and associated metadata
my %CVSDesc = (rsh          => undef,
	       root         => undef, );
my %BKDesc = (user          => undef, );

#############################################################################
## main/driver
#############################################################################

my $opt_verbose = undef;
my $opt_interactive = undef;
#my $opt_debug = 0;

my $opt_skipupdate = 0;

# references to a 'CVSDesc' and 'BKDesc'
my ($opt_cvsRice, $opt_cvsANL, $opt_cvsSF, $opt_bkANL) = 
    (undef, undef, undef, undef);
my $opt_userArgonne = undef;

# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

parseOptions($0);

# ----------------------------------------------------------
# Run
# ----------------------------------------------------------

RunGetOpenAD();


#############################################################################
## parseOptions
#############################################################################

sub parseOptions
{
  my ($command) = @_;
  
  # Get optional arguments
  my %opts = ();
  my $ret = GetOptions(\%opts, @the_options);
  if (!$ret) { 
    printErrorAndExit(); 
  }
  
  # Get optional arguments: verbose, help
  $opt_verbose = $mode_verb_normal; # default
  if (defined($opts{'verbose'})) {
    $opt_verbose = $opts{'verbose'};
  } 
  if (defined($opts{'help'})) {
    printUsageAndExit($the_program);
  } 
  
  # Get optional arguments: interactive
  if (defined($opts{'interactive'})) {
    $opt_interactive = 1;
  } 

  # Get optional arguments: useranl, skip-update
  if (defined($opts{'useranl'})) {
    $opt_userArgonne = $opts{'useranl'};
  } 
  if (defined($opts{'skip-update'})) {
    $opt_skipupdate = 1;
  } 

  
  # Get required arguments
  my $numArgs = scalar(@ARGV);
  if ($numArgs != 0) { 
    printErrorAndExit("Invalid number of required arguments!\n"); 
  }
  
  
  # Set CVS stuff
  my $user = $ENV{'USER'};
  if (defined($opt_userArgonne)) {
    $user = $opt_userArgonne;
  }
  
  $opt_cvsRice         = { %CVSDesc, }; 
  $opt_cvsRice->{rsh}  = "$RealBin/../sshcvs/sshcvs-hipersoft-anon";
  $opt_cvsRice->{root} = 
      ':ext:anoncvs@koolkat2.cs.rice.edu:/Volumes/cvsrep/developer';
  
  $opt_cvsANL         = { %CVSDesc, }; 
  $opt_cvsANL->{rsh}  = 'ssh';
  $opt_cvsANL->{root} = ':ext:' . $user . '@terra.mcs.anl.gov:/homes/utke/***';
  
  $opt_cvsSF         = { %CVSDesc, }; 
  $opt_cvsSF->{rsh}  = "''";
  $opt_cvsSF->{root} = ':pserver:anonymous@cvs.sourceforge.net:/cvsroot';
  
  $opt_bkANL         = { %BKDesc, }; 
  $opt_bkANL->{user} = $user . '@terra.mcs.anl.gov';
}


# printUsageAndExit
sub printUsageAndExit 
{
  my ($command) = @_; # not used now
  print STDOUT ${the_usage};
  exit(-1);
}

# printErrorAndExit
sub printErrorAndExit 
{
  my ($msg) = @_;
  if (defined($msg)) {
    print STDOUT "${msg}";
  }
  print STDOUT "Try `${the_program} --help' for more information.\n";
  exit(-1);
}

# printUsageAndExit
sub undefEnvVarErr 
{
  my ($var) = @_;
  print STDOUT "Undefined environment variable '${var}'\n";
  exit(-1);
}


#############################################################################
## Subroutines
#############################################################################

# RunGetOpenAD

sub RunGetOpenAD 
{
  #my($mode) = @_;
  
  my @CVSSelf = ('bin', 'doc', 'test', 'tools', 'README.*', 'xercesc');
  
  my @CVSReposRice = ('Open64', 'OpenADFortTk', 'OpenAnalysis', 'xercesc');
  my $OptRice = '-z5 -s CVS_RSH=' . $opt_cvsRice->{rsh} . 
      ' -d ' . $opt_cvsRice->{root};
  
  my $OptSF = '-z5 -s CVS_RSH=' . $opt_cvsSF->{rsh} . 
      ' -d ' . $opt_cvsSF->{root};
  
  #my @BKReposANL = ('/home/utke/bk_tmpRep/xaifBooster_CFR/xaifBooster', 
  #		    '/home/utke/BK_Reps/CODE/angel');
  
  # $opt_cvsANL
  
  # --------------------------------------------------------
  # Generate commands
  # --------------------------------------------------------
  my $cmdDescVecRef = [ ];
  my $desc = undef;
  
  # FIXME: generate commands to update OpenAD directories and files
  # (cannot just run cvs update)

  # Rice Hipersoft repositories
  for my $repo (@CVSReposRice) {
    $desc = { %RunCmds::CmdDesc, };
    if (-d "./${repo}") {
      if (!$opt_skipupdate) {
	$desc->{cmd} = "cvs ${OptRice} update ${repo}";
	$desc->{desc} = "cvs update ${repo} (Rice)";
      }
    }
    else {
      $desc->{cmd} = "cvs ${OptRice} co ${repo}";
      $desc->{desc} = "cvs co ${repo} (Rice)";
    }
    push(@{$cmdDescVecRef}, $desc) if (defined($desc->{cmd}));
  }
  
  # xaifBooster
  $desc = { %RunCmds::CmdDesc, }; 
  if (-d './xaifBooster') {
    if (!$opt_skipupdate) {
      $desc->{cmd} = 'cd ./xaifBooster ; bk pull';
      $desc->{desc} = 'bk pull xaifBooster (ANL)';
    }
  }
  else {
    $desc->{cmd} = 'bk clone ' . $opt_bkANL->{user} . 
	':/home/utke/bk_tmpRep/xaifBooster_CFR/xaifBooster';
    $desc->{desc} = 'bk clone xaifBooster (ANL)';
  }
  push(@{$cmdDescVecRef}, $desc) if (defined($desc->{cmd}));
  
  # angel
  $desc = { %RunCmds::CmdDesc, }; 
  if (-d './angel') { 
    if (!$opt_skipupdate) {
      $desc->{cmd} = 'cd ./angel ; bk pull';
      $desc->{desc} = 'bk pull angel (ANL)';
    }
  }
  else {
    $desc->{cmd} = 'bk clone ' . $opt_bkANL->{user} . 
	':/home/utke/BK_Reps/CODE/angel';
    $desc->{desc} = 'bk clone angel (ANL)';
  }
  push(@{$cmdDescVecRef}, $desc) if (defined($desc->{cmd}));
  
  # boost
  $desc = { %RunCmds::CmdDesc, }; 
  if (-d './boost') { 
    # FIXME: skip this for now
  }
  else {
    $desc->{cmd} = "cvs ${OptSF}/boost login ; cvs ${OptSF}/boost co boost";
    $desc->{desc} = 'cvs co boost (sourceforge.net)' . "\n" .
	'  ---> Press <Enter> at anonymous CVS password prompt.';
  }
  push(@{$cmdDescVecRef}, $desc) if (defined($desc->{cmd}));
  
  # xaif-1.0
  $desc = { %RunCmds::CmdDesc, }; 
  if (-d './xaif-1.0') { 
    if (!$opt_skipupdate) {
      $desc->{cmd} = 'cd ./xaif-1.0 ; bk pull';
      $desc->{desc} = 'bk pull xaif-1.0 (bkbits.net)';
    }
  }
  else {
    $desc->{cmd} = 'bk clone http://xaif.bkbits.net/xaif-1.0';
    $desc->{desc} = 'bk clone xaif-1.0 (bkbits.net)';
  }
  push(@{$cmdDescVecRef}, $desc) if (defined($desc->{cmd}));
  
  
  # --------------------------------------------------------
  # Execute commands
  # --------------------------------------------------------
  my $verb = $opt_verbose - $mode_verb_terse; # normal goes to 1
  
  RunCmds($cmdDescVecRef, $verb, $opt_interactive);
}


#############################################################################

# Local Variables:
# perl-indent-level: 2
# End:
