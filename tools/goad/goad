#! /usr/bin/env perl
# -*-Mode: perl;-*-

# make sure we execute perl
#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

# $Header: /m_home/m_utkej/Argonne/cvs2svn/cvs/OpenAD/tools/goad/goad,v 1.6 2004-05-21 15:12:45 eraxxon Exp $
## * BeginCopyright *********************************************************
## 
## 
## *********************************************************** EndCopyright *

#############################################################################
##
## $Source: /m_home/m_utkej/Argonne/cvs2svn/cvs/OpenAD/tools/goad/goad,v $ 
##
##   Nathan Tallent.
##
#############################################################################

use strict;
use warnings;

use FindBin qw($Script $RealBin);
use File::Spec;
use IO::File;
use Getopt::Long;

use lib "$RealBin/../libperl";
use RunCmds qw(%CmdDesc RunCmds RunCmd);

use lib "$RealBin/../..";
use openad_config;


STDOUT->autoflush(1); 

#############################################################################

my $the_program = $Script;
my $the_usage = 
"usage: ${the_program} [options]

Get (or update) OpenAD repositories.  Requires cvs and bitkeeper.

Plans: 
  - save all output into one log file
  
Options:
  --skip-update  -- do not update existing repositories; only get new ones

  -v [lvl], --verbose [lvl]
    Set verbosity level.  If no level is supplied, defaults to 2.
    0: Play the silent game
    1: Pouty (terse message)
    2: Sanguine (standard activity messages) [Default]
    3: Chatty
    4: Talk your ear off
  -h, --help         print help

Development options:
  -i, --interactive  
    prompt user to authorize each command
\n";

my @the_options = ('skip-update',
		   
		   'verbose|v:i',
		   'help|h', 
		   'interactive|i',
		   );

#############################################################################

my ($mode_verb_silent,
    $mode_verb_terse,
    $mode_verb_normal,
    $mode_verb_chatty,
    $mode_verb_teengirls) =
    (0, 1, 2, 3, 4);

#############################################################################
## main/driver
#############################################################################

my $opt_verbose = undef;
my $opt_interactive = undef;
#my $opt_debug = 0;

my $opt_skipupdate = 0;

# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

parseOptions($0);

# ----------------------------------------------------------
# Run
# ----------------------------------------------------------

RunGetOpenAD();


#############################################################################
## parseOptions
#############################################################################

sub parseOptions
{
  my ($command) = @_;
  
  # Get optional arguments
  my %opts = ();
  my $ret = GetOptions(\%opts, @the_options);
  if (!$ret) { 
    printErrorAndExit(); 
  }
  
  # Get optional arguments: verbose, help
  $opt_verbose = $mode_verb_normal; # default
  if (defined($opts{'verbose'})) {
    $opt_verbose = $opts{'verbose'};
  } 
  if (defined($opts{'help'})) {
    printUsageAndExit($the_program);
  } 
  
  # Get optional arguments: interactive
  if (defined($opts{'interactive'})) {
    $opt_interactive = 1;
  } 

  # Get optional arguments: skip-update
  if (defined($opts{'skip-update'})) {
    $opt_skipupdate = 1;
  } 

  
  # Get required arguments
  my $numArgs = scalar(@ARGV);
  if ($numArgs != 0) { 
    printErrorAndExit("Invalid number of required arguments!\n"); 
  }
}


# printUsageAndExit
sub printUsageAndExit 
{
  my ($command) = @_; # not used now
  print STDOUT ${the_usage};
  exit(-1);
}

# printErrorAndExit
sub printErrorAndExit 
{
  my ($msg) = @_;
  if (defined($msg)) {
    print STDOUT "${msg}";
  }
  print STDOUT "Try `${the_program} --help' for more information.\n";
  exit(-1);
}

# printUsageAndExit
sub undefEnvVarErr 
{
  my ($var) = @_;
  print STDOUT "Undefined environment variable '${var}'\n";
  exit(-1);
}


#############################################################################
## Subroutines
#############################################################################

# RunGetOpenAD

sub RunGetOpenAD 
{
  #my($mode) = @_;
  
  my $cmdDescVecRef = [ ];
  my $desc = undef;

  # --------------------------------------------------------
  # Generate commands for self
  # --------------------------------------------------------
  
  # FIXME: generate commands to update OpenAD directories and files
  # (cannot just run cvs update)
  my @CVSSelf = ('bin', 'config', 'doc', 'test', 'tools', 
		 'openad_config.pm', 'README*', 'setenv.*');

  # bin config doc test tools openad_config.pm README* setenv.*

  
  # --------------------------------------------------------
  # Generate commands for sub repositories
  # --------------------------------------------------------
  my $config = openad_config->new();
  my $OpenADRepos = $config->getRepos();
  
  for my $repo (@{$OpenADRepos}) {

    # if we don't have repository info, then this is external to us
    next if (!defined($repo->{repos}));
    
    my $repoPath = $repo->{path} . '/' . $repo->{name};
    my $repoExists = (-d $repoPath);
    #print("--> $repoPath\n");
    
    next if ($repoExists && $opt_skipupdate);

    # Either checkout or update the repository
    $desc = { %RunCmds::CmdDesc, };
    
    if (defined($repo->{repos}->{iscvs})) {
      # A CVS repository
      my $nm = $repo->{name};
      my $env = 'CVS_RSH=' . $repo->{repos}->{rsh};
      my $opt = '-z5 -d ' . $repo->{repos}->{root};

      if ($repoExists) {
	$desc->{cmd} = "cd ${repoPath} ; ${env} cvs ${opt} update";
	$desc->{desc} = "cvs update ${repoPath}";
      }
      else {
	$desc->{cmd} = "cd $repo->{path} ; ${env} cvs ${opt} co ${nm}";
	$desc->{desc} = "cvs checkout ${repoPath}";
      }
    } 
    elsif (defined($repo->{repos}->{isbk})) {
      # A BitKeeper repository
      my $nm = $repo->{name};
      my $arg = $repo->{repos}->{root};
      
      if ($repoExists) {
	$desc->{cmd} = "cd ${repoPath} ; bk pull";
	$desc->{desc} = "bk pull ${repoPath}";
      }
      else {
	$desc->{cmd} = "cd $repo->{path} ; bk clone ${arg}";
	$desc->{desc} = "bk clone ${repoPath}";
      }
    }
    else {
      die "Programming Error!";
    }
    
    push(@{$cmdDescVecRef}, $desc);
  }
  
  # --------------------------------------------------------
  # Execute commands
  # --------------------------------------------------------
  my $verb = $opt_verbose - $mode_verb_terse; # normal goes to 1
  
  RunCmds($cmdDescVecRef, $verb, $opt_interactive);
}


#############################################################################

# Local Variables:
# perl-indent-level: 2
# End:
