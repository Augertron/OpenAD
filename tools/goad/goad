#!/usr/bin/env python
#-*-Mode: python;-*-

import os
import sys
import time
import getopt
mydir = os.path.dirname(__file__)
OpenADRoot = os.path.abspath(os.path.join(mydir,'..','..'))
libpythontk = os.path.join(OpenADRoot,"tools","libpythontk")
sys.path.append(libpythontk)
import RunCmds
sys.path.append(OpenADRoot)
os.chdir(OpenADRoot)

class goad:
  def __init__(self):
    self.the_program = os.path.basename(sys.argv[0])
    self.the_usage = "usage: "+self.the_program+" [options] \
\
Get (or update) OpenAD repositories.  Requires cvs and bitkeeper.\
  \
Options:\
  --skip-update  : do not update existing repositories; only get new ones\
\
  -v [lvl], --verbose [lvl]\
    Set verbosity level.  If no level is supplied, defaults to 2.\
    0: Play the silent game\
    1: Pouty (terse message)\
    2: Sanguine (standard activity messages) [Default]\
    3: Chatty\
    4: Talk your ear off\
  -h, --help         print help\
\
Development options:\
  -i, --interactive  \
    prompt user to authorize each command\n"

    self.help = "Try "+self.the_program+" --help' for more information.\n"

    self.mode_verb_silent=0
    self.mode_verb_terse=1
    self.mode_verb_normal=2
    self.mode_verb_chatty=3
    self.mode_verb_teengirls=4

#############################################################################
## main/driver
#############################################################################

    self.opt_verbose = 1
    self.opt_interactive = 0
    self.opt_debug = 0
    self.opt_skipupdate = 0

# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

    self.parseOptions(sys.argv)
    self.logfnm = self.prepareLogFile()

# ----------------------------------------------------------
# Update home repository
# ----------------------------------------------------------

  def updateOpenADRepository(self):
    print "updating OpenAD"
    dir = os.getcwd()
    self.outfnm = os.path.join(dir,"goad.tmp~")
    f = open(self.logfnm,"w")
    cmd = 'svn update > '+self.outfnm+" 2>&1"
    f.write("*****************************************************************************\n\n")
    f.write(cmd+'\n')
    f.close()
    os.system(cmd)
    os.system("cat "+self.outfnm+" >> "+self.logfnm)
    os.remove(self.outfnm)
    

# ----------------------------------------------------------
# Run function
# ----------------------------------------------------------
  def Run(self):
    repositories =openad_config.openad_config().getRepos();
    cmdDescVecRef = []
    for repo in repositories.values():
       # if we don't have repository info, then this is external to us
      if repo.getUrl() == None:
        continue
      if repo.repoExists():
        repo.update() # sets CmdDesc to update repository
      else:
        repo.checkout() # check out repository
      cmdDescVecRef.append(repo.cmdDesc)
    RunCmds.RunCmds().RunCmds(cmdDescVecRef, 1, 0, self.logfnm)
    sys.exit(0);

#############################################################################
## parseOptions
#############################################################################

  def parseOptions(self, command):
    # Get optional arguments
    opts,ret = getopt.getopt(command[1:],'v:hid:',["skip-update","verbose=","help","interactive","debug="])
    if len(ret) != 0:
      self.printErrorAndExit()
  
    # Get optional arguments: verbose, help
    self.opt_verbose = self.mode_verb_normal # default
    for opt in opts:
      arg, val = opt
      if arg == "--verbose" or arg == "-v":
        self.opt_verbose = val
      if arg == "--help" or arg == "-h":
        self.printUsageAndExit()
      if arg == "--debug" or arg == "-d":
        self.opt_debug = val
      # Get optional arguments: interactive
      if arg == "--interactive" or arg == "-i":
        self.opt_interactive = 1 
      # Get optional arguments: skip-update
      if arg == "--skip-update":
        self.opt_skipupdate = 1

  # printUsageAndExit
  def printUsageAndExit(self):
    print self.the_usage
    sys.exit()

  # printErrorAndExit
  def printErrorAndExit(self, msg=help):
    print msg
    sys.exit()

  # printUsageAndExit
  def undefEnvVarErr(self, var):
    print "Undefined environment variable '"+var+"'\n"
    sys.exit()

  # Returns the name of a log file 
  def prepareLogFile(self):
    dir = os.getcwd();
    (y,mon,d,h,min,s,dow, doy, i) = time.localtime()
    stamp = str(y)+"_"+str(mon)+"_"+str(d)+"_"+str(h)+"_"+str(min)+"_"+str(s)
    snm="goad."+stamp+".log~"
    print "goad log: "+ snm
    logfnm = os.path.join(dir,snm)
    return logfnm;

#############################################################################
# ----------------------------------------------------------
# Run
# ----------------------------------------------------------

goad = goad()
goad.updateOpenADRepository()
import openad_config
goad.Run()
