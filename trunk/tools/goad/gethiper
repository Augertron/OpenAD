#! /usr/bin/env perl
# -*-Mode: perl;-*-

# make sure we execute perl
#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

# $Header: /m_home/m_utkej/Argonne/cvs2svn/cvs/OpenAD/tools/goad/gethiper,v 1.1 2004-09-29 13:19:16 eraxxon Exp $
## * BeginCopyright *********************************************************
## 
## 
## *********************************************************** EndCopyright *

#############################################################################
##
## $Source: /m_home/m_utkej/Argonne/cvs2svn/cvs/OpenAD/tools/goad/gethiper,v $ 
##
##   Nathan Tallent.
##
#############################################################################

use strict;
use warnings;

use FindBin qw($Script $RealBin);
use Cwd qw(cwd abs_path);
use IO::File;
use Getopt::Long;

use POSIX qw(strftime);

use lib "$RealBin/../libperltk";
use RepositoryTools qw(RunRepositoryUpdate);

use lib "$RealBin/../..";
use hpctoolkit_config;

my $HPCToolkitRoot = abs_path("$RealBin/../..");

STDOUT->autoflush(1); 

#############################################################################

my $the_program = $Script;
my $the_usage = 
"usage: ${the_program} [options]

Get (or update) HPCToolkit repositories.  Requires cvs.
  
Options:
  --skip-update  : do not update existing repositories; only get new ones
  --self-only    : update only HPCToolkitRoot files; CVS environment must
                   be set.  This is useful when the HPCToolkit child 
                   repositories are located within the HPCToolkitRoot 
                   repository.

  -v [lvl], --verbose [lvl]
    Set verbosity level.  If no level is supplied, defaults to 2.
    0: Play the silent game
    1: Pouty (terse message)
    2: Sanguine (standard activity messages) [Default]
    3: Chatty
    4: Talk your ear off
  -h, --help         print help

Development options:
  -i, --interactive  
    prompt user to authorize each command
\n";

# -d, --debug [lvl]  Debug level

my @the_options = ('skip-update',
		   'self-only',
		   
		   'verbose|v:i',
		   'help|h', 
		   'interactive|i',
		   'debug|d:i',
		   );

#############################################################################

#my %VerboseTypes = (
#		    "silent"    => 0,
#		    "terse"     => 1,
#		    "normal"    => 2,
#		    "chatty"    => 3,
#		    "teengirls" => 4,
#		    );

my ($mode_verb_silent,
    $mode_verb_terse,
    $mode_verb_normal,
    $mode_verb_chatty,
    $mode_verb_teengirls) =
    (0, 1, 2, 3, 4);

my $cvsSelfRepo = 
    [ 'bin', 'config', 'tools',
      'hpctoolkit_config.pm',  ]; # 'README*'


#############################################################################
## main/driver
#############################################################################

my $opt_verbose = undef;
my $opt_interactive = undef;
my $opt_debug = 0;

my $opt_skipupdate = 0;
my $opt_selfonly = 0;


# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

parseOptions($0);

# ----------------------------------------------------------
# Run
# ----------------------------------------------------------

my $config = hpctoolkit_config->new();
my $repositories = $config->getRepos();
my $opts = { 
  selfonly    => $opt_selfonly,
  skipupdate  => $opt_skipupdate,
  interactive => $opt_interactive,
  verbose     => $opt_verbose - $mode_verb_terse, # normal goes to 1
  logfnm      => prepareLogFile(),
  debug       => $opt_debug,
};

print STDOUT "Sending output to '" . $opts->{logfnm} . "'\n";

RunRepositoryUpdate($HPCToolkitRoot, $cvsSelfRepo, $repositories, $opts);

exit(0);

#############################################################################
## parseOptions
#############################################################################

sub parseOptions
{
  my ($command) = @_;
  
  # Get optional arguments
  my %opts = ();
  my $ret = GetOptions(\%opts, @the_options);
  if (!$ret) { 
    printErrorAndExit(); 
  }
  
  # Get optional arguments: verbose, help
  $opt_verbose = $mode_verb_normal; # default
  if (defined($opts{'verbose'})) {
    $opt_verbose = $opts{'verbose'};
  } 
  if (defined($opts{'help'})) {
    printUsageAndExit($the_program);
  }
  if (defined($opts{'debug'})) {
    $opt_debug = $opts{'debug'};
  }
  
  # Get optional arguments: interactive
  if (defined($opts{'interactive'})) {
    $opt_interactive = 1;
  } 

  # Get optional arguments: skip-update
  if (defined($opts{'skip-update'})) {
    $opt_skipupdate = 1;
  } 
  if (defined($opts{'self-only'})) {
    $opt_selfonly = 1;
  } 

  
  # Get required arguments
  my $numArgs = scalar(@ARGV);
  if ($numArgs != 0) { 
    printErrorAndExit("Invalid number of required arguments!\n"); 
  }
}


# printUsageAndExit
sub printUsageAndExit 
{
  my ($command) = @_; # not used now
  print STDOUT ${the_usage};
  exit(-1);
}

# printErrorAndExit
sub printErrorAndExit 
{
  my ($msg) = @_;
  if (defined($msg)) {
    print STDOUT "${msg}";
  }
  print STDOUT "Try `${the_program} --help' for more information.\n";
  exit(-1);
}

# printUsageAndExit
sub undefEnvVarErr 
{
  my ($var) = @_;
  print STDOUT "Undefined environment variable '${var}'\n";
  exit(-1);
}


#############################################################################
## Subroutines
#############################################################################

# Returns the name of a log file that has size 0 in the filesystem.
sub prepareLogFile
{
  #my ($x) = @_;

  my $dir = cwd();
  my $stamp = strftime("%Y_%m_%d-%H_%M_%S", localtime(time()));
  my $logfnm = "${dir}/goad.${stamp}.log~";
  truncate($logfnm, 0);
  
  return $logfnm;
}

#############################################################################

# Local Variables:
# perl-indent-level: 2
# End:
