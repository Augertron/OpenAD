#!/usr/bin/env python

import os
import sys
if (not os.environ.has_key("OPENADROOT")):
  sys.stderr.write("ERROR: no OPENADROOT environment variable set, please use the setenv scripts and refer to the manual for details.\n")
  sys.exit(-1)
sys.path.append(os.environ["OPENADROOT"])
sys.path.append(os.path.join(os.environ["OPENADROOT"],"tools","libpythontk"))
import Repository

def netAvail() :
    ret=os.system("ping -c 1 -q terra.mcs.anl.gov > /dev/null 2>&1")
    if (ret == 0) : 
	return True
    else :
	return False	

def changed(repo):
    if (not netAvail()) :
    	sys.stdout.write('  ? |')
        sys.stdout.flush()
        return
    if repo.locallyModified() :
        sys.stdout.write('  C |')
        sys.stdout.flush()
    else:
        sys.stdout.write('    |')
        sys.stdout.flush()

def inOut(repo, writeable):
    if (not netAvail()) :
    	sys.stdout.write('  ? |')
        sys.stdout.flush()
        return
    status=""
    if repo.incoming() :
        status+="I"
    if (writeable and repo.outgoing()) :
        status+="O"
    sys.stdout.write('%3s |'%status)
    sys.stdout.flush()

def main():
  from optparse import OptionParser
  usage = '%prog [options]\n\tdisplays OpenAD repository status\n\tKind:   hg, svn or cvs\n\tR/W:    R=read-only, W=writeable\n\tLocal:  C=locally changed or locally pending updates (hg only) \n\tRemote: O=outgoing changes , I=incoming changes'
  opt = OptionParser(usage=usage)
  opt.add_option('-l','--localTag',dest='localTag',
                 help="inlcude the local revision tag where applicable (implies -t)",
                 action='store_true',default=False)
  opt.add_option('-q','--quick',dest='quick',
                 help="don't check for uncommited changes or pending pushes",
                 action='store_true',default=False)
  opt.add_option('-t','--tagsOnly',dest='tagsOnly',
                 help="only list the repository and a version tag",
                 action='store_true',default=False)
  opt.add_option('-v','--verbose',dest='verbose',
                 help="extra output",
                 action='store_true',default=False)
  (options, args) = opt.parse_args()
  if (options.localTag):
      options.tagsOnly=True
  doQuick=False
  if (options.verbose):
      sys.stdout.write("running for OPENADROOT="+os.environ["OPENADROOT"]+"\n")
  try:
      os.chdir(os.environ["OPENADROOT"])
      allRepList=['../OpenAD','Regression','Examples','OpenADFortTk','OpenADFortTk/Regression','OpenADFortTk/tools/SourceProcessing','OpenADFortTk/tools/SourceProcessing/Regression','OpenAnalysis','xaif','xaifBooster','angel','Open64','boost/boost','xercesc']
      repList=[]
      for i in allRepList:
          if (os.path.exists(i)):
              repList.append(i)
      maxNameLength=max([len(r) for r in repList])
      if (not options.tagsOnly):
          ldirName="local directory"
	  maxNameLength=max(maxNameLength,len(ldirName))
          columnLabelsStr = ldirName+' '*(maxNameLength-len(ldirName))+'|Kind|R/W'
          if (not options.quick):
              columnLabelsStr += '|Loc.|Rem.'
          columnLabelsStr += '|URL\n'
          sys.stdout.write(columnLabelsStr+'-'*len(columnLabelsStr)+'\n')
          sys.stdout.flush()
      for i in repList:
          repo=Repository.Detect.makeRepo(os.path.join(os.environ["OPENADROOT"],i),None)
          patchedName=i+"".join([' ' for s in range(len(i),maxNameLength)])
          if options.tagsOnly:
              sys.stdout.write('%s %s:%s\n' % (patchedName,repo.kind(),repo.getVersionTag(options.localTag)))
          else:
              sys.stdout.write('%s|%4s|' % (patchedName,repo.kind()))
              sys.stdout.flush()
              if repo.writeable():
                  sys.stdout.write(' W |')
                  sys.stdout.flush()
                  if (not options.quick):
                      changed(repo)
                      inOut(repo, True)
              else:
                  sys.stdout.write(' R |')
                  sys.stdout.flush()
                  if (not options.quick):
                      sys.stdout.write('    |')
                      inOut(repo, False)
              sys.stdout.write('%s\n' % repo.getUrl().strip())
          sys.stdout.flush()
          os.chdir(os.environ["OPENADROOT"])
  except RuntimeError, e:
      print 'caught excetion: ',e
      return -1

if __name__ == "__main__":
  sys.exit(main())
