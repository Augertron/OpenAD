#!/usr/bin/env python
#-*-Mode: python;-*-

import os
import sys
import time
if (not os.environ.has_key("OPENADROOT")):
  sys.stderr.write("ERROR: no OPENADROOT environment variable set, please use the setenv scripts and refer to the manual for details.\n")
  sys.exit(-1)
sys.path.append(os.environ["OPENADROOT"])
import openad_config
sys.path.append(os.path.join(os.environ["OPENADROOT"],"tools","libpythontk"))
import RunCmds
import Repository

class Goad:
  def __init__(self,options):
    dir = os.getcwd();
    snm="goad."+time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime())+".log~"
    print "goad log: "+ snm
    self.logfnm = os.path.join(dir,snm)
    self.runCmdsDebug=1
    if options.verbose :
      self.runCmdsDebug=2
    self.interactive=options.interactive
    self.keepGoing=options.keepGoing
    self.tests=options.tests

  def Run(self):
    oaCfg=openad_config.openad_config(self.tests)
    repositories={'skeletonRepo':oaCfg.skeletonRepo}
    repositories.update(openad_config.openad_config(self.tests).getRepos())
    cmdDescVecRef = []
    for repo in repositories.values():
       # if we don't have repository info, then this is external to us
      if repo.getUrl() is None:
        continue
      if repo.repoExists():
	if os.path.islink(repo.getLocalName()):
	  sys.stdout.write('WARNING: '+repo.getLocalRepoPath()+' is a link, no updates will be done\n')
          sys.stdout.flush()
          continue
        try: 
          repo.update() # sets CmdDesc to update repository
        except (RunCmds.RunnerException), e:
          if self.keepGoing:
            sys.stderr.write('WARNING: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
        except (Repository.RepositoryException), e:
          if self.keepGoing:
            sys.stderr.write('WARNING: '+str(e)+'... continuing\n')
            if isinstance(repo,Repository.CVSRepository) or isinstance(repo,Repository.SVNRepository):
              if (self.interactive):
                 if (raw_input("     May be this is a Mercurial repository. Should I try an hg update? (y)/n: ")) == "n" :
                   sys.stdout.flush()
                   continue
              else:
                sys.stdout.write("     Assuming this is a Mercurial repository and attempting an hg update.\n")
              # see if this is a mercurial repo
              mercRepo=Repository.MercurialRepository(repo.getUrl(),
                                                      repo.getLocalPath(),
                                                      repo.getLocalName(),
                                                      repo.getSubdir(),
                                                      repo.getTag(),
                                                      repo.getVar())
              try: 
                mercRepo.update() 
                cmdDescVecRef.append(mercRepo.cmdDesc)
              except (Repository.RepositoryException), eInner:
                sys.stderr.write('ERROR: '+str(eInner)+'... continue\n')
            continue
          else:
            raise e
      else:
        try: 
          repo.checkout() # check out repository
        except (Repository.RepositoryException, RunCmds.RunnerException), e:
          if self.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
      cmdDescVecRef.append(repo.cmdDesc)
    RunCmds.Runner(self.runCmdsDebug,self.interactive, self.logfnm, self.keepGoing).doit(cmdDescVecRef)
    sys.exit(0);

def main():
  from optparse import OptionParser
  cwd=os.getcwd()
  if (os.path.basename(cwd) != 'OpenAD'):
      opt.error('the current working directory has to the the OpenAD root directory')
      return -1
  usage = '%prog [options]\n\t get or update OpenAD repositories'
  opt = OptionParser(usage=usage)
  opt.add_option('-i','--interactive',dest='interactive',
                 help="requires to confirm each command",
                 action='store_true',default=False)
  opt.add_option('-k','--keepGoing',dest='keepGoing',
                 help="keep going despite errors, to be used particularly for working with Mercurial development repositories",
                 action='store_true',default=False)
  opt.add_option('-t','--tests',dest='tests',
                 help="include repositories for examples and test cases (requires Mercurial)",
                 action='store_true',default=False)
  opt.add_option('-v','--verbose',dest='verbose',
                 help="extra output",
                 action='store_true',default=False)
  (options, args) = opt.parse_args()
  if (options.verbose):
    sys.stdout.write("running for OPENADROOT="+os.environ["OPENADROOT"])
  try: 
    os.chdir(os.environ["OPENADROOT"])
    cfgOldMtime=os.stat('openad_config.py').st_mtime
    goad = Goad(options)
    goad.Run()
    if (cfgOldMtime!=os.stat('openad_config.py').st_mtime):
      sys.stderr.write('NOTE: the update changed the repository configuration, rerunning the update.\n')
      goad = Goad(options)
      goad.Run()
  except (Repository.RepositoryException, RunCmds.RunnerException), e:
    sys.stderr.write('ERROR: '+str(e)+'\n')
    opt.print_help()
    return 1
  return 0

if __name__ == "__main__":
  sys.exit(main())
