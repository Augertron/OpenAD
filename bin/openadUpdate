#!/usr/bin/env python
##########################################################
# This file is part of OpenAD released under the LGPL.   #
# The full COPYRIGHT notice can be found in the top      #
# level directory of the OpenAD distribution             #
##########################################################

import os
import sys
import time
if (not os.environ.has_key("OPENADROOT")):
  sys.stderr.write("ERROR: no OPENADROOT environment variable set, please use the setenv scripts and refer to the manual for details.\n")
  sys.exit(-1)
sys.path.append(os.environ["OPENADROOT"])
import openadConfig
sys.path.append(os.path.join(os.environ["OPENADROOT"],"tools","libpythontk"))
import RunCmds
import Repository

class OpenadUpdate:
  def __init__(self,options):
    dir = os.getcwd();
    snm="openadUpdate."+time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime())+".log~"
    print "openadUpdate log: "+ snm
    self.logfnm = os.path.join(dir,snm)
    self.runCmdsDebug=1
    if options.verbose :
      self.runCmdsDebug=2
    self.options=options

  def Run(self):
    oaCfg=openadConfig.openadConfig(self.options.tests,self.options.extras,self.options.development)
    repositories=oaCfg.getRepos()
    cmdDescVecRef = []
    for key in oaCfg.orderedRepoList:
      repo=repositories[key]
      actRepo=None
      # if we don't have repository info, then this is external to us
      if repo.getUrl() is None:
        sys.stdout.write('WARNING: '+repo.getLocalRepoPath()+' has no repository information, no updates will be done\n')
        sys.stdout.flush()
        continue
      if repo.repoExists():
	if os.path.islink(repo.getLocalName()):
	  sys.stdout.write('WARNING: '+repo.getLocalRepoPath()+' is a link, no updates will be done\n')
          sys.stdout.flush()
          continue
        try:
          actRepo=Repository.Detect.makeRepo(os.path.join(repo.getLocalPath(),repo.getLocalName()),
                                             repo.getSubdir())
          if (actRepo.getUrl()==repo.getUrl()
              and
              actRepo.getTag()==repo.getTag()) : 
            repo.update() # sets CmdDesc to update repository
          else:
            if (self.options.development):
              if (actRepo.getUrl()!=repo.getUrl()
                  or
                  actRepo.getTag()!=repo.getTag()):
                sys.stdout.write('NOTE: development repo URL '+actRepo.getUrl()+' for '+actRepo.getLocalRepoPath()+'\n')
              actRepo.update() # sets CmdDesc to update the actual repository
              repo=actRepo
            else:   
              sys.stdout.write('WARNING: for '+repo.getLocalName()+' mismatched ')
              if (str(actRepo.getUrl())!=str(repo.getUrl())) : 
                sys.stdout.write('URL: \n\tcurrent: '+str(actRepo.getUrl())+'\n\tconfig : '+str(repo.getUrl())+'\n')
              elif (actRepo.getTag()!=repo.getTag()) : 
                sys.stdout.write('tag: \n\tcurrent: '+str(actRepo.getTag())+'\n\tconfig : '+str(repo.getTag())+'\n')
              if (not self.options.force and raw_input("\tThe current repository will be deleted and a new repository will be created, continue? (y)/n: ")) == "n" :
                sys.stdout.flush()
                repo.update() # sets CmdDesc to update repository
              else :
		cmd=RunCmds.CmdDesc()
		cmd.setCmd("rm -rf "+os.path.join(repo.getLocalPath(),repo.getLocalName()))
		cmd.setDesc("removing "+os.path.join(repo.getLocalPath(),repo.getLocalName()))
                cmdDescVecRef.append(cmd)
                repo.checkout() # check out repository
        except (RunCmds.RunnerException), e:
          if self.options.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
        except (Repository.RepositoryException), e:
          if self.options.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
      else:
        try: 
          repo.checkout() # check out repository
        except (Repository.RepositoryException, RunCmds.RunnerException), e:
          if self.options.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
      cmdDescVecRef.append(repo.cmdDesc)
    RunCmds.Runner(self.runCmdsDebug,self.options.interactive, self.logfnm, self.options.keepGoing).doit(cmdDescVecRef)
    sys.exit(0);

def main():
  from optparse import OptionParser
  os.chdir(os.environ["OPENADROOT"])
  usage = '%prog [options]\n\t get or update OpenAD repositories'
  opt = OptionParser(usage=usage)
  opt.add_option('-e','--extras',dest='extras',
                 help="include repositories for revolve and examples referenced in the User Manual (requires Mercurial)",
                 action='store_true',default=False)
  opt.add_option('-f','--force',dest='force',
                 help="do all actions, no confirmations (even when repositories are deleted), implies -k",
                 action='store_true',default=False)
  opt.add_option('-i','--interactive',dest='interactive',
                 help="requires to confirm each command",
                 action='store_true',default=False)
  opt.add_option('-k','--keepGoing',dest='keepGoing',
                 help="keep going despite errors",
                 action='store_true',default=False)
  opt.add_option('-t','--tests',dest='tests',
                 help="include repositories for test cases (requires Mercurial)",
                 action='store_true',default=False)
  opt.add_option('-v','--verbose',dest='verbose',
                 help="extra output",
                 action='store_true',default=False)
  opt.add_option('-d','--development',dest='development',
                 help="only for developers!: adjust updates for Mercurial development repositories",
                 action='store_true',default=False)
  (options, args) = opt.parse_args()
  if (options.verbose):
    sys.stdout.write("running for OPENADROOT="+os.environ["OPENADROOT"])
  if (options.force):
    options.keepGoing=True
    if (options.interactive):
      opt.error("options -f and -i are mutually exclusive")
  try: 
    os.chdir(os.environ["OPENADROOT"])
    cfgOldMtime=os.stat('openadConfig.py').st_mtime
    oadU = OpenadUpdate(options)
    oadU.Run()
    if (cfgOldMtime!=os.stat('openadConfig.py').st_mtime):
      sys.stdout.write('NOTE: the update changed the repository configuration, rerunning the update.\n')
      oadU = OpenadUpdate(options)
      oadU.Run()
  except (Repository.RepositoryException, RunCmds.RunnerException), e:
    sys.stderr.write('ERROR: '+str(e)+'\n')
    opt.print_help()
    return 1
  return 0

if __name__ == "__main__":
  sys.exit(main())
