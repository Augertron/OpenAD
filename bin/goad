#!/usr/bin/env python
#-*-Mode: python;-*-

import os
import sys
import time
OpenADRoot = os.path.abspath(os.path.join(os.path.dirname(__file__),'..'))
sys.path.append(OpenADRoot)
sys.path.append(os.path.join(OpenADRoot,"tools","libpythontk"))
import RunCmds
import Repository

class Goad:
  def __init__(self,options):
    dir = os.getcwd();
    snm="goad."+time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime())+".log~"
    print "goad log: "+ snm
    self.logfnm = os.path.join(dir,snm)
    self.runCmdsDebug=1
    if options.debug :
      self.runCmdsDebug=2
    self.interactive=options.interactive
    self.keepGoing=options.keepGoing
    self.tests=options.tests

  def updateOpenADRepository(self):
    aCmdDesc=RunCmds.CmdDesc()
    aCmdDesc.setDesc("updating OpenAD")
    aCmdDesc.setCmd("svn update")
    RunCmds.Runner(self.runCmdsDebug,self.interactive, self.logfnm, self.keepGoing).doit([aCmdDesc])
    
  def Run(self):
    import openad_config
    repositories =openad_config.openad_config(self.tests).getRepos();
    cmdDescVecRef = []
    for repo in repositories.values():
       # if we don't have repository info, then this is external to us
      if repo.getUrl() is None:
        continue
      if repo.repoExists():
        try: 
          repo.update() # sets CmdDesc to update repository
        except (RunCmds.RunnerException), e:
          if self.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
        except (Repository.RepositoryException), e:
          if self.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continue\n')
            if isinstance(repo,Repository.CVSRepository) or isinstance(repo,Repository.SVNRepository):
              if (raw_input("May be this is a Mercurial repository. Should I try an hg update? (y)/n: ")) == "n" :
                sys.stdout.flush()
                continue
              # see if this is a mercurial repo
              mercRepo=Repository.MercurialRepository(repo.getUrl(),
                                                      repo.getLocalPath(),
                                                      repo.getLocalName(),
                                                      repo.getSubdir(),
                                                      repo.getTag(),
                                                      repo.getVar())
              try: 
                mercRepo.update() 
                cmdDescVecRef.append(mercRepo.cmdDesc)
              except (Repository.RepositoryException), eInner:
                sys.stderr.write('ERROR: '+str(eInner)+'... continue\n')
            continue
          else:
            raise e
      else:
        try: 
          repo.checkout() # check out repository
        except (Repository.RepositoryException, RunCmds.RunnerException), e:
          if self.keepGoing:
            sys.stderr.write('ERROR: '+str(e)+'... continuing\n')
            continue
          else:
            raise e
      cmdDescVecRef.append(repo.cmdDesc)
    RunCmds.Runner(self.runCmdsDebug,self.interactive, self.logfnm, self.keepGoing).doit(cmdDescVecRef)
    sys.exit(0);

def main():
  os.chdir(OpenADRoot)
  from optparse import OptionParser
  usage = '%prog [options]\n\t get or update OpenAD repositories'
  opt = OptionParser(usage=usage)
  opt.add_option('-i','--interactive',dest='interactive',
                 help="requires to confirm each command",
                 action='store_true',default=False)
  opt.add_option('-k','--keepGoing',dest='keepGoing',
                 help="keep going despite errors",
                 action='store_true',default=False)
  opt.add_option('-t','--tests',dest='tests',
                 help="include repositories with test cases (requires Mercurial)",
                 action='store_true',default=False)
  opt.add_option('-d','--debug',dest='debug',
                 help="extra information",
                 action='store_true',default=False)
  (options, args) = opt.parse_args()
  try: 
    goad = Goad(options)
    goad.updateOpenADRepository()
    goad.Run()
  except (Repository.RepositoryException, RunCmds.RunnerException), e:
    sys.stderr.write('ERROR: '+str(e)+'\n')
    return 1
  return 0

if __name__ == "__main__":
  sys.exit(main())
